{
  "method": "sampling/createMessage",
  "params": {
    "messages": [
      {
        "role": "user",
        "content": {
          "type": "text",
          "text": "You are a Kubernetes expert. Given this user intent and available resources, select the resources that could be relevant for detailed analysis.\n\n## User Intent\nI need to deploy a web application with a database backend\n\n## Available Resources\n- Deployment (apps/v1)\n- Service (v1)\n- ConfigMap (v1)\n- Secret (v1)\n- PersistentVolumeClaim (v1)\n- StatefulSet (apps/v1)\n\n## Instructions\n\nSelect all resources that could be relevant for this intent. Consider:\n- Direct relevance to the user's needs\n- Common Kubernetes patterns and best practices\n- Resource relationships and combinations\n- Production deployment patterns\n- Complex multi-component solutions\n- **Custom Resource Definitions (CRDs)** that might provide higher-level abstractions or simpler alternatives\n- Platform-specific resources (e.g., Crossplane, Knative, Istio, ArgoCD) that could simplify the deployment\n- **CRD Selection Priority**: If you see multiple CRDs from the same group with similar purposes (like \"App\" and \"AppClaim\"), include the namespace-scoped ones (marked as \"Namespaced: true\") rather than cluster-scoped ones, as they're more appropriate for application deployments\n\nDon't limit yourself - if the intent is complex, select as many resources as needed.\n\n## Response Format\n\nRespond with ONLY a JSON array of resource objects with full identifiers. Do NOT wrap in an object - just return the array:\n\n```json\n[\n  {\n    \"kind\": \"Deployment\",\n    \"apiVersion\": \"apps/v1\",\n    \"group\": \"apps\"\n  },\n  {\n    \"kind\": \"Service\", \n    \"apiVersion\": \"v1\",\n    \"group\": \"\"\n  }\n]\n```\n\nIMPORTANT: Your response must be ONLY the JSON array, nothing else.\n\n## Selection Philosophy\n\n- **Be inclusive** - It's better to analyze too many than miss important ones\n- **Think holistically** - Consider complete solutions, not just individual components\n- **Consider dependencies** - If you select one resource, include its typical dependencies\n- **Include supporting resources** - ConfigMaps, Secrets, ServiceAccounts often needed\n- **Evaluate custom resources** - CRDs often provide simpler, higher-level interfaces than raw Kubernetes resources\n- **Prefer namespace-scoped CRDs** - When multiple similar CRDs exist from the same group (e.g., \"App\" vs \"AppClaim\"), prefer namespace-scoped ones as they're more user-friendly and require fewer permissions\n- **Don't assume user knowledge** - Users may not know about available platforms/operators in their cluster\n- **Use exact identifiers** - Include full apiVersion and group to avoid ambiguity"
        }
      }
    ],
    "includeContext": "thisServer",
    "maxTokens": 100
  }
}
